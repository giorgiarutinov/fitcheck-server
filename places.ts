import { Router } from 'express';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const router = Router();

const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY!;
const RADIUS = 3000; // 3 –∫–º —Ä–∞–¥–∏—É—Å

// üö© –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
router.post('/nearby-stores', async (req, res) => {
  try {
    const { latitude, longitude } = req.body;
    if (!latitude || !longitude) {
      return res.status(400).json({ error: 'Coordinates are required' });
    }

    const types = ['shopping_mall', 'clothing_store'];
    let allPlaces: any[] = [];

    for (const type of types) {
      const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${latitude},${longitude}&radius=${RADIUS}&type=${type}&language=en&key=${GOOGLE_API_KEY}`;

      const response = await fetch(url);
      const data = await response.json();

      const places = data.results.map((place: any) => ({
        id: place.place_id,
        name: place.name,
        address: place.vicinity,
        distance: 0, // –ü–æ–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 0, –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –≤—ã—á–∏—Å–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        isOpen: place.opening_hours?.open_now,
        openingHoursText: place.opening_hours?.weekday_text?.join('\n') ?? '',
        rating: place.rating,
        placeID: place.place_id
      }));

      allPlaces = allPlaces.concat(places);
    }

    return res.json({ stores: allPlaces }); // ‚¨ÖÔ∏è –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º stores
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ nearby-stores:', error);
    return res.status(500).json({ error: 'Server error' });
  }
});

// üö© –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ –ø–æ placeID
router.post('/place-details', async (req, res) => {
  try {
    const { placeId } = req.body;
    if (!placeId) {
      return res.status(400).json({ error: 'placeId is required' });
    }

    const encodedPlaceId = encodeURIComponent(placeId);
    const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${encodedPlaceId}&fields=url&key=${GOOGLE_API_KEY}`;

    const response = await fetch(url);
    const data = await response.json();

    if (data.result?.url) {
      return res.json({ url: data.result.url });
    } else {
      return res.status(404).json({ error: 'URL not found for this placeId' });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ place-details:', error);
    return res.status(500).json({ error: 'Server error' });
  }
});

export default router;
