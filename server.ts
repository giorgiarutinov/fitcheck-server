import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { analyzeOutfitStyleFromBase64 } from './analyze-outfit-style.js';
import { GoogleGenerativeAI } from '@google/generative-ai';
import placesRouter from './places'; // <-- –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–µ—Ä—Ö—É

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: '10mb' }));

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
app.use('/', placesRouter);

// Logging middleware
app.use((req, res, next) => {
  console.log('\n=== NEW REQUEST ===');
  console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
  console.log('Headers:', req.headers);
  console.log('Body:', req.body);
  next();
});

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY!);
const trendModel = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

// ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞
app.post('/analyze-style', async (req, res) => {
  try {
    const { image, mimeType, trendy, query } = req.body;

    // üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (trendy && query) {
  const lang = req.body.lang === 'ru' ? 'ru' : 'en';
  console.log(`‚ú® –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω! –Ø–∑—ã–∫: ${lang}`);

  const prompt = lang === 'ru'
    ? `
–¢—ã –º–æ–¥–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "analysis": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
  "colors": [
    { "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞", "hex": "#HEXCODE" },
    ...
  ],
  "brands": ["–±—Ä–µ–Ω–¥1", "–±—Ä–µ–Ω–¥2", "–±—Ä–µ–Ω–¥3", "–±—Ä–µ–Ω–¥4", "–±—Ä–µ–Ω–¥5"]
}

–í–∞–∂–Ω–æ: hex –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º —Ü–≤–µ—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "#RRGGBB".

–í–æ–ø—Ä–æ—Å: ${query}
`
    : `
You are a fashion stylist. Respond strictly in JSON format:

{
  "analysis": "Brief description of today's fashion trends.",
  "colors": [
    { "name": "color name", "hex": "#HEXCODE" },
    ...
  ],
  "brands": ["brand1", "brand2", "brand3", "brand4", "brand5"]
}

Important: hex must be valid in "#RRGGBB" format.

Question: ${query}
`;

  const result = await trendModel.generateContent([{ text: prompt }]);
  const text = result.response.text();

  const jsonMatch = text.match(/\{[\s\S]*\}/);
  if (!jsonMatch) {
    return res.status(400).json({ error: 'JSON not found in response' });
  }

  const parsed = JSON.parse(jsonMatch[0]);
  return res.json(parsed);
}

    // if (trendy && query) {
    //   console.log('‚ú® –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω!');
    //   const prompt = `
    //     –¢—ã –º–æ–¥–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

    //     {
    //       "analysis": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
    //       "colors": [
    //     { "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞", "hex": "#HEXCODE" },
    //     { "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞", "hex": "#HEXCODE" },
    //       ...
    //     ]
    //     }

    //     –í–∞–∂–Ω–æ: hex –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º —Ü–≤–µ—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "#RRGGBB".

    //     –í–æ–ø—Ä–æ—Å: ${query}
    //     `;

    //   // const prompt = `
    //   //   –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
    //   //   {
    //   //     "analysis": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è",
    //   //     "colors": ["—Ü–≤–µ—Ç 1", "—Ü–≤–µ—Ç 2", "—Ü–≤–µ—Ç 3", "—Ü–≤–µ—Ç 4", "—Ü–≤–µ—Ç 5"]
    //   //   }

    //   //   –í–æ–ø—Ä–æ—Å: ${query}
    //   // `;

    //   const result = await trendModel.generateContent([{ text: prompt }]);
    //   const text = result.response.text();

    //   const jsonMatch = text.match(/\{[\s\S]*\}/);
    //   if (!jsonMatch) {
    //     return res.status(400).json({ error: 'JSON not found in response' });
    //   }

    //   const parsed = JSON.parse(jsonMatch[0]);
    //   return res.json(parsed);
    // }

    // üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    // if (!image) {
    //   return res.status(400).json({ success: false, error: 'Image (base64) is required' });
    // }

    if (!image) {
      return res.status(400).json({ success: false, error: 'Image (base64) is required' });
    }

    // const result = await analyzeOutfitStyleFromBase64(image, mimeType);
    const result = await analyzeOutfitStyleFromBase64(image, mimeType, req.body.prompt); // <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    return res.json(result);

  } catch (error) {
    console.error('‚ùå Server error:', error);
    res.status(500).json({
      error: error instanceof Error ? error.message : 'Internal server error'
    });
  }
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`\nüöÄ Server ready at http://localhost:${PORT}`);
});

